using AutoGeneratedApiClient.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace AutoGeneratedApiClient.Controllers
{
	[ApiController]
	[Produces("application/json")]
	public class AuthController : Controller
	{
		public IConfiguration Config;

		public AuthController(IConfiguration config)
		{
			Config = config;
		}
		[HttpPost("login")]
		public async Task<ActionResult<AuthResposonse>> Login([FromBody]LoginModel model)
		{
			if((model?.UserName?.Equals("admin") ?? false) && (model?.Password?.Equals("321123") ?? false))
			{
				return Ok(new AuthResposonse()
				{
					Token = StringifyToken(BuildToken(model.UserName))
				});
			}
			return Unauthorized();
		}
		private string StringifyToken(JwtSecurityToken token)
		{
			return new JwtSecurityTokenHandler().WriteToken(token);
		}
		private JwtSecurityToken BuildToken(string userName)
		{
			var claims = new[] {
				new Claim("role", "Admin"),
				new Claim(JwtRegisteredClaimNames.Email, $"{userName}@demo.com"),
				new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
				new Claim(ClaimTypes.NameIdentifier, userName),
				new Claim(JwtRegisteredClaimNames.GivenName, userName),
			};

			var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Config["Jwt:Key"]));
			var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

			var token = new JwtSecurityToken(Config["Jwt:Issuer"],
			  Config["Jwt:Issuer"],
			  claims,
			  expires: DateTime.UtcNow.AddDays(1),
			  signingCredentials: creds);

			return token;
		}
	}
}
